name: deploy-dapp

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          # dev environments
          - bellecour-dev
          - arbitrum-sepolia-dev
          # prod environments (requires a tag starting with v)
          - bellecour-prod
          - arbitrum-sepolia-prod
          - arbitrum-prod

jobs:
  extract-tag:
    runs-on: ubuntu-latest
    outputs:
      clean_tag: ${{ steps.tag.outputs.clean_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # if input environment ends with -prod
        #   ref should be a tag beginning with v if not exit error
        #   use unique clean-tag: <tag>-<timestamp>
        # else
        #   use rolling clean-tag: dev
      - name: Check and extract tag
        id: tag
        run: |
          if [[ "${{ github.event.inputs.environment }}" == *-prod ]]; then
                      if [[ "${GITHUB_REF}" != refs/tags/v* ]]; then
            echo "Error: The ref must be a tag starting with 'v' for production deployments."
            exit 1
          fi
          TAG=${GITHUB_REF#refs/tags/v}-$(date +%s)
            echo "clean_tag=${TAG}" | tee -a $GITHUB_OUTPUT
          else
            echo "clean_tag=dev" | tee -a $GITHUB_OUTPUT
          fi

  docker-publish:
    uses: iExecBlockchainComputing/github-actions-workflows/.github/workflows/docker-build.yml@docker-build-v2.3.1
    needs: [extract-tag]
    with:
      image-name: 'iexechub/protected-data-delivery-dapp'
      registry: 'docker.io'
      dockerfile: 'Dockerfile'
      security-scan: true
      security-report: 'sarif'
      hadolint: true
      push: true
      image-tag: ${{ needs.extract-tag.outputs.clean_tag }}
    secrets:
      username: ${{ secrets.DOCKERHUB_USERNAME }}
      password: ${{ secrets.DOCKERHUB_PAT }}

  sconify:
    uses: iExecBlockchainComputing/github-actions-workflows/.github/workflows/sconify.yml@sconify-v2.0.0
    needs: [docker-publish, extract-tag]
    with:
      image-name: 'iexechub/protected-data-delivery-dapp'
      image-tag: ${{ needs.extract-tag.outputs.clean_tag }}
      sconify-debug: false
      sconify-prod: true
      docker-registry: docker.io
      sconify-version: ${{ vars.SCONIFY_VERSION }}
      binary: /usr/local/bin/node
      command: node
      host-path: |
        /etc/hosts
        /etc/resolv.conf
      binary-fs: true
      fs-dir: /app
      heap: 1G
      dlopen: 1
      mprotect: 1
    secrets:
      docker-username: ${{ secrets.DOCKERHUB_USERNAME }}
      docker-password: ${{ secrets.DOCKERHUB_PAT }}
      scontain-username: ${{ secrets.SCONTAIN_REGISTRY_USERNAME }}
      scontain-password: ${{ secrets.SCONTAIN_REGISTRY_PAT }}
      scone-signing-key: ${{ secrets.SCONIFY_SIGNING_PRIVATE_KEY }}

  deploy-dapp:
    needs: [extract-tag, sconify]
    runs-on: ubuntu-latest
    outputs:
      app-address: ${{ steps.deploy-dapp.outputs.app-address }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd deployment
          npm ci

      - name: Deploy dapp contract
        id: deploy-dapp
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.PROTECTED_DATA_DELIVERY_APP_OWNER_PRIVATEKEY }}
          DOCKER_IMAGE_TAG: ${{ needs.sconify.outputs.prod-image-tag }}
          CHECKSUM: ${{  needs.sconify.outputs.prod-checksum }}
          FINGERPRINT: ${{ needs.sconify.outputs.prod-mrenclave }}
          RPC_URL: ${{ secrets.RPC_URL }}
          SCONIFY_VERSION: ${{ vars.SCONIFY_VERSION }}
        run: |
          cd deployment
          npm run deploy-app
          echo "app-address=$(cat .app-address)" >> $GITHUB_OUTPUT

      - name: Add resource to whitelist
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.PROTECTED_DATA_DELIVERY_APP_OWNER_PRIVATEKEY }}
          APP_ADDRESS: ${{ steps.deploy-dapp.outputs.app-address }}
          WHITELIST_ADDRESS: ${{ vars.PROTECTED_DATA_DELIVERY_WHITELIST_ADDRESS }}
          RPC_URL: ${{ secrets.RPC_URL }}
        run: |
          cd deployment
          npm run add-app-to-whitelist

      - name: Configure ENS
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.PROTECTED_DATA_DELIVERY_APP_OWNER_PRIVATEKEY }}
          APP_ADDRESS: ${{ steps.deploy-dapp.outputs.app-address }}
          APP_ENS: ${{ vars.PROTECTED_DATA_DELIVERY_APP_ENS }}
          RPC_URL: ${{ secrets.RPC_URL }}
        run: |
          cd deployment
          npm run configure-app-ens

      - name: Transfer app to sharing contract
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.PROTECTED_DATA_DELIVERY_APP_OWNER_PRIVATEKEY }}
          RPC_URL: ${{ secrets.RPC_URL }}
          DATAPROTECTOR_SHARING_ADDRESS: ${{ vars.DATAPROTECTOR_SHARING_ADDRESS }}
          APP_ADDRESS: ${{ steps.deploy-dapp.outputs.app-address }}
        run: |
          cd deployment
          npm run transfer-app-to-sharing-contract
